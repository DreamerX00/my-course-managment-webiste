name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "20.x"

jobs:
  # Job 1: Code Quality Checks
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: TypeScript type check
        run: npx tsc --noEmit

  # Job 2: Build Test
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build Next.js application
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: .next
          retention-days: 7

  # Job 3: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Run npm audit
        run: npm audit --production
        continue-on-error: true

      - name: Run dependency check
        run: npx depcheck
        continue-on-error: true

  # Job 4: Database Migration Check
  prisma-check:
    name: Prisma Migration Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check Prisma schema format
        run: npx prisma format --check

      - name: Validate Prisma schema
        run: npx prisma validate

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Check migrations
        run: |
          echo "Checking if migrations are up to date..."
          ls -la prisma/migrations/ || echo "No migrations found"

  # Job 5: Deploy to Vercel (only on main branch)
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [lint, build, security, prisma-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
          working-directory: ./

      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Deployment successful! Check your Vercel dashboard for the live URL.'
            })

  # Job 6: Notification on Success
  notify-success:
    name: Send Success Notification
    runs-on: ubuntu-latest
    needs: [lint, build, security, prisma-check]
    if: success()

    steps:
      - name: Send success notification
        run: |
          echo "✅ All CI/CD checks passed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"

  # Job 7: Notification on Failure
  notify-failure:
    name: Send Failure Notification
    runs-on: ubuntu-latest
    needs: [lint, build, security, prisma-check]
    if: failure()

    steps:
      - name: Send failure notification
        run: |
          echo "❌ CI/CD pipeline failed!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Please check the logs for more details."
